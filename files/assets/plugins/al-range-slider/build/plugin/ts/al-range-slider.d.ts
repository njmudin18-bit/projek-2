// Generated by dts-bundle-generator v5.9.0

export declare type ExtractFunctionKeys<T> = {
	[KEY in keyof T]-?: T[KEY] extends ((...args: never[]) => unknown) ? KEY : never;
}[keyof T];
export declare type ExtractFunctionArgs<T, KEY extends ExtractFunctionKeys<T>> = Parameters<T[KEY]>[number];
export declare type TPointValue = number | string;
export declare type TPoint = [
	position: number,
	value: TPointValue
];
export interface IModelProps {
	readonly initialSelectedValues: Record<string, TPointValue>;
	readonly valuesPrecision: number;
	readonly collideKnobs: boolean;
	range?: {
		min: number;
		max: number;
		step: number;
		positionStep?: number;
	};
	valuesArray?: number[] | string[];
	pointsMap?: Record<number, TPointValue>;
	pointsMapPrecision?: number;
	positionsArray?: number[];
}
export interface IModelState {
	selectedPoints: Record<string, TPoint>;
	selectedPointsLimits: Record<string, {
		min: number;
		max: number;
	}>;
}
export declare type TOrientation = "horizontal" | "vertical";
export declare type TTheme = "light" | "dark";
export declare type TPointsMap = [
	position: string,
	value: TPointValue
][];
export interface ICommonViewProps {
	readonly cssClass: string;
	readonly orientation: TOrientation;
}
export interface IViewProps extends ICommonViewProps {
	readonly theme: TTheme;
	readonly selectedIds: string[];
	readonly grid: {
		readonly pointsMap: TPointsMap;
		readonly minTicksStep: number;
		readonly marksStep: number;
	} | undefined;
	readonly allowSmoothTransition: boolean;
	readonly showInputs: boolean | "hidden";
	readonly showTooltips: boolean;
	readonly collideTooltips: boolean;
	readonly tooltipsSeparator: string;
	readonly prettify?: (value: string) => string;
}
export interface IViewState {
	selectedValues?: Record<string, TPointValue>;
	selectedPrettyValues?: Record<string, string>;
	currentPosition?: [
		id: string,
		position: number
	];
	currentPositionLimits?: [
		id: string,
		limits: {
			min: number;
			max: number;
		}
	];
	currentActiveStatus?: [
		id: string,
		active: boolean
	];
	currentValue?: [
		id: string,
		value: string
	];
	unknownPosition?: number;
}
export interface IProps extends Omit<IModelProps, "pointsMapPrecision" | "positionsArray">, Omit<IViewProps, "cssClass" | "selectedIds" | "grid"> {
	readonly grid: {
		readonly minTicksStep: number;
		readonly marksStep: number;
		readonly pointsMap?: TPointsMap;
	};
	readonly onInit?: (state?: IState) => void;
	readonly onStart?: (state?: IState) => void;
	readonly onFinish?: (state?: IState) => void;
	readonly onChange?: (state?: IState) => void;
	readonly onUpdate?: (state?: IState) => void;
}
export interface IState extends Partial<IViewState>, Partial<IModelState> {
}
export interface IData {
	values?: IProps["initialSelectedValues"];
	positions?: Record<string, number>;
}
declare class Presenter {
	#private;
	constructor(parent: HTMLElement, props: IProps);
	destroy(): void;
	disable(disabled?: boolean): void;
	restart(props?: Partial<IProps>): void;
	update(data?: IData): void;
	getState(): IState | undefined;
	private handleCurrentPointLimitsChange;
	private handleCurrentPointChange;
	private handleCurrentActiveStatusChange;
	private handleCurrentPositionChange;
	private handleCurrentValueChange;
	private handleUnknownPositionChange;
}
declare global {
	interface JQuery {
		alRangeSlider: {
			<T extends TMethod>(optionsOrMethod?: TOptions | T, methodArg?: TMethodArg<T>): JQuery;
			defaults: IProps;
			methods: typeof methods;
		};
	}
}
declare const methods: readonly [
	"destroy",
	"disable",
	"restart",
	"update"
];
export declare type TOptions = Partial<IProps>;
export declare type TMethod = typeof methods[number];
export declare type TMethodArg<T extends TMethod> = ExtractFunctionArgs<Presenter, T>;

export {};
